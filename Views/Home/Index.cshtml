@model List<FuelPredictor.Models.Dto.StationDto>

@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h4 style="text-align:center;">Liste des prix des stations au @DateTime.Now.Date.ToString("dd/MM/yyyy")</h4>
<style>
    #Home {
        text-decoration: underline;
    }
</style>



@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>



<div class="container" style="margin-top:25px; background-image: url('~/images/back.jpg'); background-size: cover;">
    <!-- Left column for the map -->
    <div class="row">
        <div class="col-5">
            <div id="map" style="height: 400px;"></div>
        </div>
        
        <div class="col-7" id="DetailStation">
            <canvas id="chart"></canvas>

            <script>
                // Données statiques pour les étiquettes (dates) et les prix
                const dates = ["2024-05-01", "2024-05-02", "2024-05-03", "2024-05-04", "2024-05-05"];
                const prices = [14.56, 15.0, 14.56, 12.56, 14.56];

                // Créer le graphique
                var ctx = document.getElementById('chart').getContext('2d');
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: dates,
                        datasets: [{
                            label: 'Prix Journaliers',
                            data: prices,
                            fill: false,
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1
                        }]
                    },
                    options: {
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                    unit: 'day'
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Prix'
                                }
                            }
                        }
                    }
                });
            </script>



       
            <div id="prediction"></div>
        </div>
       </div>

    <div class="row">
        <div class="col-12">
    
    
            <div class="right">
                <div class="table-responsive">
                    <table id="stationsTable" class="table table-striped table-bordered" style="width:100%">
                        <thead>
                            <tr>
                                <th scope="col">Station</th>
                                <th scope="col">Société</th>
                                <th scope="col">Ville</th>
                                <th scope="col">Adresse</th>
                                <th scope="col">Gasoil Price</th>
                                <th scope="col">Diesel Price</th>
                                <th scope="col"></th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                        @*     @foreach (var item in Model)
                            {
                                <tr>
                                    
                                    <td>@Html.DisplayFor(modelItem => item.Nom)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Adresse)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Company.Nom)</td>
                                    <td>17,12</td>
                                    <td>18,2</td>
                                    <td>
                                        <a asp-controller="PrixJournaliers" class="btn btn-outline-secondary" asp-action="IndexStation" asp-route-id="@item.Id">Historique des Prix</a>
                                    </td>
                                </tr>
                            } *@
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>

   
</div>

@section scripts {


    <script src="~/lib/datatables/js/dataTables.bootstrap4.js"></script>
    <script src="~/lib/datatables/js/jquery.dataTables.js"></script>
    <script src="~/lib/datatables/js/datatables.bootstrap4.js"></script>
    <script src="~/lib/datatables/js/datatables.bootstrap4.min.js"></script>
    <script src="~/js/BateauxDataTable.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js" asp-append-version="true"></script>

    <script>
        $(document).ready(function () {
            $('#stationsTable').DataTable({
                "serverSide": true,
                "ajax": {
                    "url": "/Stations/GetStations",
                    "type": "POST",
                    "datatype": "json"
                },
      
                "columns": [
                    { "data": "nom", "name": "Nom", "autowidth": true },
                    { "data": "company", "name": "Company", "autowidth": true },
                    { "data": "ville", "name": "Ville", "autowidth": true },
                    { "data": "adresse", "name": "Adresse", "autowidth": true },
                    {
                        "data": "prixGasoilAujourdhui",
                        "name": "prixGasoilAujourdhui",
                        "autowidth": true,
                        "type": "num", // Définit le type de données comme numérique pour permettre le tri numérique
                        "render": $.fn.dataTable.render.number(',', '.', 2) // Formate les prix avec 2 décimales
                    },
                    {
                        "data": "prixEssenceAujourdhui",
                        "name": "prixEssenceAujourdhui",
                        "autowidth": true,
                        "type": "num", // Définit le type de données comme numérique pour permettre le tri numérique
                        "render": $.fn.dataTable.render.number(',', '.', 2) // Formate les prix avec 2 décimales
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return `<button class="btn btn-outline-primary" onclick="showStationOnMap(${row.latitude}, ${row.longitude})">Voir sur la carte</button>`;
                        }
                    },
                    // Ajoutez d'autres colonnes si nécessaire
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return `<a href="/PrixJournaliers/IndexStation/${row.id}">Historique des Prix</a>`;
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    console.log(json); // Log the received data
                }
            });
        });

        /*

        function fetchPrixJournaliers(stationId) {
            $.ajax({
                url: '/Home/GetPrixJournaliers',
                type: 'GET',
                data: { stationId: stationId },
                success: function (data) {
                    // Mettre à jour les attributs data
                    $('#chart').attr('data-dates', JSON.stringify(data.dates));
                    $('#chart').attr('data-prices', JSON.stringify(data.prices));

                    // Créer ou mettre à jour le graphique
                    renderChart();
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        }


        function renderChart() {
            var canvas = document.getElementById('chart');
            var dates = JSON.parse(canvas.getAttribute('data-dates'));
            var prices = JSON.parse(canvas.getAttribute('data-prices'));

            var ctx = canvas.getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Prix Journaliers',
                        data: prices,
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Prix'
                            }
                        }
                    }
                }
            });
        }
        */


    function showStationOnMap(latitude, longitude) {
        map.setView([latitude, longitude], 20);
        window.scrollTo({
            top: 0,
            behavior: 'smooth' // pour un défilement fluide, utilisez 'smooth'
        });
    }




    var map = L.map('map').setView([33.5731, -7.5898], 13); // set initial position and zoom level for Casablanca

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Extract markers from ViewBag
    var jsModel = @Html.Raw(Json.Serialize(Model));
    console.log(jsModel)

    // Add markers for each station

    for (i in jsModel) {
        var item = jsModel[i];
        var popupContent = '<div style="text-align:center;"><strong>' + item.nom + '</strong><br>' +
            'Adresse: ' + item.adresse + '<br>' +
            'Ville: ' + item.ville + '<br>' +
            'Société: ' + item.company + '<br>' +
            'Prix Gasoil aujourd\'hui: ' + item.prixGasoilAujourdhui + '<br>' +
            'Prix Essence aujourd\'hui: ' + item.prixEssenceAujourdhui + '<br>' +
            
            '<button onclick="fetchPrixJournaliers(' + item.id + ')" class="btn btn-outline-success">Afficher les prix journaliers</button>'+
            '<a href="/PrixJournaliers/IndexStation/' + item.id + '" class="btn btn-outline-success">Liste des prix</a></div>';
        L.marker([item.latitude, item.longitude]).addTo(map)
            .bindPopup(popupContent)
            .openPopup();
    }



    function searchTable() {
        // Déclaration des variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Boucle à travers toutes les lignes et cache celles qui ne correspondent pas à la recherche
        for (i = 0; i < tr.length; i++) {
            td = tr[i].getElementsByTagName("td")[0]; // Changez l'index si vous voulez filtrer une colonne différente
            if (td) {
                txtValue = td.textContent || td.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>





}





















