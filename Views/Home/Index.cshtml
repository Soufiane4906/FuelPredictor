@model List<FuelPredictor.Models.Dto.StationDto>

@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    ViewData["Title"] = "Home Page";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>


<h4 style="text-align:center;">Liste des prix des stations au @DateTime.Now.Date.ToString("dd/MM/yyyy")</h4>
<style>
    #Home {
        text-decoration: underline;
    }
</style>



<div class="container" style="margin-top:25px; background-image: url('~/images/back.jpg'); background-size: cover;">
    <!-- Left column for the map -->
    <div class="row">
     
            <div class="col-5" id="map" style="height: 400px;"></div>
      
    
        <div class="col-7" id="DetailStation">
            <!-- Chart canvas for line chart -->
            <canvas id="myChartLine"></canvas>
            </div>

     
       </div>


     

    <div class="row" style="background:azure;">
        <div class="col-12">
    
    
            <div class="right">
                <div class="table-responsive">
                    <table id="stationsTable" class="table table-striped table-bordered" style="width:100%">
                        <thead>
                            <tr>
                                <th scope="col">Station</th>
                                <th scope="col">Société</th>
                                <th scope="col">Ville</th>
                                <th scope="col">Adresse</th>
                                <th scope="col">Gasoil Price</th>
                                <th scope="col">Diesel Price</th>
                                <th scope="col"></th>
                                <th scope="col"></th>
                            </tr>
                        </thead>
                        <tbody>
                        @*     @foreach (var item in Model)
                            {
                                <tr>
                                    
                                    <td>@Html.DisplayFor(modelItem => item.Nom)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Adresse)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Company.Nom)</td>
                                    <td>17,12</td>
                                    <td>18,2</td>
                                    <td>
                                        <a asp-controller="PrixJournaliers" class="btn btn-outline-secondary" asp-action="IndexStation" asp-route-id="@item.Id">Historique des Prix</a>
                                    </td>
                                </tr>
                            } *@
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>

   
</div>
<!-- Add this modal to your HTML -->
<div class="modal fade" id="predictModal" tabindex="-1" role="dialog" aria-labelledby="predictModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="predictModalLabel">Prédiction du prix</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="predictForm">
                    <div class="form-group">
                        <label for="predictDate" class="col-form-label">Date:</label>
                        <input type="date" class="form-control" id="predictDate">
                    </div>
                    <select class="form-control" id="carburantId">
                        <option value="1">Gasoil</option>
                        <option value="2">Essence</option>

                        </select>

                  
                    <input type="hidden" id="stationId">
                   
                </form>
                <div id="predictionResult"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Fermer</button>
                <button type="button" class="btn btn-primary" id="predictSubmit">Prédire</button>
            </div>
        </div>
    </div>
</div>



@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.bundle.js" asp-append-version="true"></script>

    <script src="~/lib/datatables/js/dataTables.bootstrap4.js"></script>
    <script src="~/lib/datatables/js/jquery.dataTables.js"></script>
    <script src="~/lib/datatables/js/datatables.bootstrap4.js"></script>
    <script src="~/lib/datatables/js/datatables.bootstrap4.min.js"></script>
    <script src="~/js/BateauxDataTable.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js" asp-append-version="true"></script>

    <script>
        $(document).ready(function () {
            $('.predict-prix-btn').on('click', function () {
                var stationId = $(this).data('id');
                var carburantId = $(this).data('carburant-id'); // Ajustez cela selon le carburant
                $('#stationId').val(stationId);
                $('#carburantId').val(carburantId);
                $('#predictModal').modal('show');
            });

            $('#predictSubmit').on('click', function () {
                var stationId = $('#stationId').val();
                var carburantId = $('#carburantId').val();
                var date = $('#predictDate').val();

                $.ajax({
                    url: '/PrixJournaliers/PredictPrix',
                    type: 'GET',
                    data: {
                        stationId: stationId,
                        carburantId: carburantId,
                        date: date
                    },
                    success: function (result) {
                        $('#predictionResult').html('Prix prédit: ' + result.predictedPrix);
                    },
                    error: function (xhr, status, error) {
                        $('#predictionResult').html('Erreur: ' + xhr.responseJSON.error);
                    }
                });
            });
        });





    $(document).ready(function () {
            $('#stationsTable').DataTable({
                "serverSide": true,
                "ajax": {
                    "url": "/Stations/GetStations",
                    "type": "POST",
                    "datatype": "json"
                },
      
                "columns": [
                    { "data": "nom", "name": "Nom", "autowidth": true },
                    { "data": "company", "name": "Company", "autowidth": true },
                    { "data": "ville", "name": "Ville", "autowidth": true },
                    { "data": "adresse", "name": "Adresse", "autowidth": true },
                    {
                        "data": "prixGasoilAujourdhui",
                        "name": "prixGasoilAujourdhui",
                        "autowidth": true,
                        "type": "num", // Définit le type de données comme numérique pour permettre le tri numérique
                        "render": $.fn.dataTable.render.number(',', '.', 2) // Formate les prix avec 2 décimales
                    },
                    {
                        "data": "prixEssenceAujourdhui",
                        "name": "prixEssenceAujourdhui",
                        "autowidth": true,
                        "type": "num", // Définit le type de données comme numérique pour permettre le tri numérique
                        "render": $.fn.dataTable.render.number(',', '.', 2) // Formate les prix avec 2 décimales
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return `<button class="btn btn-outline-primary" onclick="showStationOnMap(${row.latitude}, ${row.longitude})">Voir sur la carte</button>`;
                        }
                    },
                    // Ajoutez d'autres colonnes si nécessaire
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return `<a href="/PrixJournaliers/IndexStation/${row.id}">Historique des Prix</a>`;
                        }
                    }
                ],
                "initComplete": function (settings, json) {
                    console.log(json); // Log the received data
                }
            });
        });


        //---------------------

        //-----------------------------------------

        var map = L.map('map').setView([33.5731, -7.5898], 13); // set initial position and zoom level for Casablanca

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Extract markers from ViewBag
        var jsModel = @Html.Raw(Json.Serialize(Model));
        console.log(jsModel)

        // Add markers for each station

        for (var i = 0; i < jsModel.length; i++) {
            var item = jsModel[i];
            var popupContent = '<div style="text-align:center;"><strong>' + item.nom + '</strong><br>' +
                'Adresse: ' + item.adresse + '<br>' +
                'Ville: ' + item.ville + '<br>' +
                'Société: ' + item.company + '<br>' +
                'Prix Gasoil aujourd\'hui: ' + item.prixGasoilAujourdhui + '<br>' +
                'Prix Essence aujourd\'hui: ' + item.prixEssenceAujourdhui + '<br>' +
                '<button id="btnPredictPrix' + i + '" class="btn btn-outline-success predict-prix-btn" data-id="' + item.id + '" data-carburant-id="1">' +
                'Prédire le prix' +
                '</button><br>' +
                '<a href="/PrixJournaliers/IndexStation/' + item.id + '" class="btn btn-outline-success">Liste des prix</a></div>';

            L.marker([item.latitude, item.longitude]).addTo(map)
                .bindPopup(popupContent)
                .openPopup();
        }


        //-----------------------------------------------------------

        function searchTable() {
            // Déclaration des variables
            var input, filter, table, tr, td, i, txtValue;
            input = document.getElementById("searchInput");
            filter = input.value.toUpperCase();
            table = document.getElementById("myTable");
            tr = table.getElementsByTagName("tr");

            // Boucle à travers toutes les lignes et cache celles qui ne correspondent pas à la recherche
            for (i = 0; i < tr.length; i++) {
                td = tr[i].getElementsByTagName("td")[0]; // Changez l'index si vous voulez filtrer une colonne différente
                if (td) {
                    txtValue = td.textContent || td.innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = "";
                    } else {
                        tr[i].style.display = "none";
                    }
                }
            }
        }
        function showStationOnMap(latitude, longitude) {
            map.setView([latitude, longitude], 20);
            window.scrollTo({
                top: 0,
                behavior: 'smooth' // pour un défilement fluide, utilisez 'smooth'
            });
        }



        //-----------------------------------------------------------------

        document.addEventListener('DOMContentLoaded', function () {
            var ctx2 = document.getElementById("myChartLine").getContext('2d');
            var lineChart;

            // Initialize the chart without any data
            initializeChart([]);

            function initializeChart(data) {
                lineChart = new Chart(ctx2, {
                    type: 'line',
                    height: "230px",
                    width: "300px",
                    responsive: true,
                    animation: false,
                    legend: { position: 'bottom' },
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'Prix par carburant',
                            data: data,
                            borderColor: 'rgb(75, 192, 192)',
                            fill: false
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                });
            }

            // Event listener for chart click
            ctx2.canvas.addEventListener('click', function (evt) {
                var activePoint = lineChart.getElementsAtEvent(evt)[0];
                if (activePoint) {
                    var stationId = activePoint._model.label; // Assuming the label corresponds to the station ID
                    updateChart(stationId);
                }
            });

            // Récupérez le bouton par son ID
            var btnUpdateChart = document.getElementById('btnUpdateChart');

            // Ajoutez un écouteur d'événements au bouton pour appeler updateChart lorsque le bouton est cliqué
            btnUpdateChart.addEventListener('click', function () {
                // Récupérez l'ID de la station à partir des attributs de données (si nécessaire)
                var stationId = this.getAttribute('data-station-id');
                // Appelez la fonction updateChart avec l'ID de la station
                updateChart(stationId);
            });
        });

        // Function to update the chart based on the selected station
        function updateChart(stationId) {
            // Check if lineChart is defined
            if (!lineChart) {
                console.error('lineChart is not defined');
                return;
            }

            $.ajax({
                url: '/PrixJournaliers/PrixJournaliersByStation',
                type: 'GET',
                data: { stationId: stationId },
                success: function (data) {
                    // Log the data received from the server
                    console.log(data);

                    // Extract relevant data for the chart
                    var labels = []; // Labels for X-axis (carburant type)
                    var prices = []; // Prices for Y-axis

                    // Loop through the data to extract labels and prices
                    for (var i = 0; i < data.length; i++) {
                        labels.push(data[i].carburant.typeCarburant);
                        prices.push(data[i].prix);
                    }

                    // Update the chart with the new data
                    lineChart.data.labels = labels;
                    lineChart.data.datasets[0].data = prices; // Assuming first dataset is for Diesel
                    lineChart.update();
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        }


        //--------------------------

        // Add this script to your existing JavaScript
        $(document).ready(function () {
            // Event listener for button click
            $('#btnUpdateChart').click(function () {
                var stationId = $(this).data('station-id');
                // AJAX request to fetch JSON data from server
                $.getJSON("/PrixJournaliers/PrixJournaliersByStation", { stationId: stationId }, function (data) {
                    var dataPoints = [];
                    // Parse JSON data and convert it into CanvasJS DataPoints
                    data.forEach(function (item) {
                        dataPoints.push({ x: item.date, y: item.prix });
                    });
                    // Render the chart inside the modal
                    renderChart(dataPoints);
                    // Show the modal
                    $('#chartModal').modal('show');
                });
            });

            // Function to render the chart
            function renderChart(dataPoints) {
                var chart = new CanvasJS.Chart("chartContainer", {
                    title: {
                        text: "Chart Title"
                    },
                    data: [{
                        type: "line",
                        dataPoints: dataPoints,
                    }]
                });
                chart.render();
            }
        });



</script>
  




}





















